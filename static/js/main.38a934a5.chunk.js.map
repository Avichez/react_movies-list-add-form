{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","isValid","onChange","setIsValid","useState","Math","random","toString","slice","id","touched","setToched","hasError","isVerified","handleOnChange","text","test","validateFields","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isValidImgUrl","setIsValidImgUrl","isValidimdbUrl","setIsValidimdbUrl","isDisabledButton","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","moviesList","setMoviesList","currentMoviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38a934a5.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  isValid?: boolean,\n  onChange?: (newValue: string) => void,\n  setIsValid?: (valid: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  isValid = true,\n  onChange = () => { },\n  setIsValid = () => { },\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const isVerified = touched && !isValid;\n\n  const validateFields = (text: string) => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    return pattern.test(text);\n  };\n\n  const handleOnChange = (text: string) => {\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      setIsValid(validateFields(text));\n    }\n\n    onChange(text);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || isVerified,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => handleOnChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {(hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      ))\n      || (isVerified && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      ))}\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [isValidImgUrl, setIsValidImgUrl] = useState(true);\n  const [isValidimdbUrl, setIsValidimdbUrl] = useState(true);\n\n  const isFieldsFilled = title && imgUrl && imdbUrl && imdbId;\n  const isValidFields = isValidImgUrl && isValidimdbUrl;\n  const isDisabledButton = !isFieldsFilled || !isValidFields;\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setCount(currentCount => currentCount + 1);\n  };\n\n  const handleSubmitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmitForm}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        isValid={isValidImgUrl}\n        setIsValid={setIsValidImgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        isValid={isValidimdbUrl}\n        setIsValid={setIsValidimdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabledButton}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = useState<Movie[]>(moviesFromServer);\n\n  const addNewMovie = (movie: Movie) => {\n    setMoviesList(currentMoviesList => [...currentMoviesList, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}